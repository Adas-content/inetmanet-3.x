1. Requirements
===============

This chapter contains the high level goals that the radio design and implementation
must fulfill.
 
 - exploit multiple CPUs and the highly parallel GPU to increase performance
 - provide performance vs. accuracy tradeoff configuration options
   (e.g. range filter, radio mode filter, listening mode filter, MAC address filter)
 - support different level of details (see details below)
 - support different transmitters and receivers (scale from flat to layered models)
 - support different radio signal models (scale from range based to accurate emulation models)
 - support different propagation models (scale from immediate to accurate models)
 - support different attenuation models (scale from free space to trace based models)
 - support different antenna models (scale from isotropic to directional models)
 - support different power consumption models (scale from mode based to signal based models)
 - provide concurrent transmitter and receiver mode (transceiver mode)
 - provide burst mode (back to back) transmissions
 - provide synchronization/preamble detection
 - provide capture during reception (switching to another transmission)
 - provide finite time radio mode switching

2. Actor Model
==============

This chapter contains the models that describe the actors of the communication
on the radio medium. All actors are implemented as OMNETPP modules some of which
may have other submodules to further split up their configuration and services.

2.1. Radio
----------

The radio model represents the physical device that is capable of transmitting
or receiving radio signals. Simultaneous transmission and reception is also
supported. The radio consists of antenna, transmitter and receiver. The receiver
can receive, and similarly the transmitter can transmit, at most one radio signal
at any given time.

The radio has an operation mode that is either off, sleep, receiver, transmitter,
transceiver or switching. The radio never initiates a radio mode switch on its
own, this mode is controlled by the MAC module. The radio also provides the current
state of its transmitter and receiver. The possible transmitter states are
unknown, idle and transmitting. The possible receiver states are unknown, idle,
busy, synchronizing and receiving.

This model is implemented in the Radio module.

2.2. Antenna
------------

The antenna model represents the physical device (a part of the radio) which
converts electric signals into radio waves, and vice versa. The antenna provides
its position and orientation using a mobility model. It also computes the antenna
gain for a given transmission or reception. This computation is based on the
transmitter/receiver positions/orientations and the antenna characteristics.

The simplest model is the isotropic antenna that has constant 1 gain independently
of the direction. This model is implemented in the IsotropicAntenna module.

Another simple model is the constant gain antenna that has a configurable direction
independent gain. This model is implemented in the ConstantGainAntenna module.

A more widely used model is the dipole antenna that has a length property and a
gain that depends on the 3D direction. This model is implemented in the
DipoleAntenna module.

A quite generic model is the interpolating antenna that has a table of angles
and antenna gains. This model computes the actual gain by interpolating in this
table using the direction and the antenna's orientation. This model is implemented
in the InterpolatingAntenna module. 

2.3. Transmitter
----------------

The transmitter represents the physical device (a part of the radio) which
converts packets into electric signals. It takes a MAC frame and produces a
description of the radio signal that will be emitted to the radio medium by the
antenna.

The simplest transmitter model has communication range, interference range and
detection range parameters. This transmitter produces transmissions that carry
the range information independently of the receiver. This model is implemented
in the IdealRadioSignalTransmitter module.

A more realistic but still quite simple transmitter model has modulation, carrier 
frequency, bandwidth and scalar power parameters. This transmitter produces
transmissions that carry the above configuration information. This model is
implemented in the ScalarRadioSignalTransmitter module.

A more computationally complex transmitter model has similar parameters to the
one above. Nevertheless this transmitter produces transmissions with power that  
changes over time and/or frequency. This model is implemented in the 
DimensionalRadioSignalTransmitter module.

A more flexible transmitter model has separate components for the packet, bit,
symbol, sample and analog domains and their functions (e.g. CRC insertion, FEC
encoding, interleaving, modulation, spreading, space-time coding, spatial
multiplexing, pulse shaping, etc.) This model allows the representation of the
radio signal down to the bit, symbol or even the sample level. This model is
implemented in the LayeredRadioSignalTransmitter module.

Finally, the most detailed transmitter model utilizes the open source GNU software
defined radio toolkit to produce transmissions. This model produces detailed
radio signals that are good enough to send to the real hardware. This model is
implemented in the GNURadioSignalTransmitter module.

2.4. Receiver
-------------

The receiver represents the physical device (a part of the radio) which converts
electric signals into packets. It takes a radio signal along with the interference
including other radio signals, meaningless noise signals and background noise,
and it produces a MAC frame along with a reception indication.

The simplest receiver model receives a transmission successfully within the signal's
communication range as long as there are no other interfering radio signal within
their interference range. This model is implemented in the IdealRadioSignalReceiver
module.

A more realistic but still quite simple receiver model receives a transmission
if the modulation, carrier frequency, bandwidth parameters match and the minimum
signal to noise plus interference ratio is above a configured threshold. This model
is implemented in the ScalarRadioSignalReceiver module.

A more computationally complex receiver model computes the signal to noise plus
interference ratio from a dimension transmission power that changes over time
and/or frequency. This model is implemented in the DimensionalRadioSignalReceiver
module.

A more flexible receiver model has separate components for the packet, bit, symbol,
sample and analog domains and their functions (e.g. CRC checking, FEC decoding,
deinterleaving, demodulation, despreading, space-time decoding, spatial
demultiplexing, pulse filtering, preamble detection, carrier sensing, etc.) This
model allows the interpretation of radio signal down to the bit, symbol or even
the sample level. This model is implemented in the LayeredRadioSignalReceiver
module.

Finally, the most detailed receiver model utilizes the open source GNU software
defined radio toolkit to receive transmissions. This model interprets detailed
radio signals that are good enough to be received from the real hardware. This
model is implemented in the GNURadioSignalReceiver module.

2.5. Medium
-----------

The radio medium model is the central component in the actor model that maintains
the state of the shared radio channel where the communication takes place. The
model keeps track of all radios, transmissions, receptions and their interferences.
It uses a propagation and an attenuation model to compute the receptions for all
required transmission and receiver pair. It also uses a background noise to provide
the noise interfering with a reception.

The radio medium maintains a number of global limits among the radios that take
part in the communication. These limits include among others the maximum antenna
gain, maximum transmission power, minimum interference power, minimum reception
power, minimum interference time, maximum transmission duration, maximum detection
range, maximum interference range, maximum communication range and maximum speed.

The radio medium provides a couple of parameters to optimize its performance. Some
parameters control how the model determines the set of affected radios when a new
transmission enters the medium. This may potentially reduce the number of radio
frames sent per transmission from the number of radios to 1. The optimization 
depends on multiple factors such as the average time a radio is in receiver mode,
whether the MAC module needs the receiver state, the spatial distribution of the
radios and so on.

Finally, the transmission and reception algorithms intentionally start and end
in the radio medium model. This centralization and the fact that the reception
API is purely functional allows parallel computation. This means that the radio
medium can utilize multiple CPUs or even the GPU for the optimistic computation
of reception decisions before they are actually needed. So when the main simulation
thread enters the radio it may simply retrieve the cached result and quickly
continue execution. On the other hand when a new transmission enters the medium
some of the already computed result must be removed from the cache. Overall, the
simulation performance may increase and may scale better with the number of
communicating radios.

This model is implemented in the RadioMedium module.

2.6. Propagation
----------------

The propagation model describes how radio signals propagate through space over
time. There are many ways to model propagation and the difference lies in the
tradeoff between performance and accuracy. The propagation model interface is
specified in the IRadioSignalPropagation module interface.

The simplest propagation model is when propagation time is neglected and radio
signals travel from transmitter to receiver in zero time. Although this model is
very cheap in terms of computation, it's also very inaccurate. This model is
implemented in the ImmediateRadioSignalPropagation module.

The most complicated model is when propagation time is accurately computed taking
into account the movement of both transmitter and receiver during the transmission
and propagation of the radio signal. The complexity arises from the fact that the
actual movement becomes only known while the radio signal is being transmitted
and propagated. This model is currently not supported by the interface.

A less computationally complex but still useful model is when the propagation of
radio signals are approximated at the start of the transmission. This makes the
transmission end position less accurate because the movement of the transmitter
is only approximated. It also makes the reception start/end time/position less
accurate because the movement of the receiver is also approximated. This model
requires that mobility models are able to provide position approximations for
the near future. This model is implemented in ConstantSpeedRadioSignalPropagation
module.

Another way to tradeoff accuracy for performance is to prevent computing the
positions for every transmission and reception, and use a periodically updated
value. This model require much less computational effort and it's especially
useful when the speed of radios is neglectable compared to the propagation speed
of radio signals. This model is supported by the interface but currently not yet
implemented.

2.7. Attenuation
----------------

The attenuation model describes how radio signals attenuate during propagation.
These models include various effects such as free-space path loss, shadowing,
refraction, reflection, absorption, diffraction and others.

The simplest attenuation model is the free-space path loss attenuation. Currently
the attenuation model depends on the signal representation, so there are as many
free-space path loss attenuation models as radio signal transmission representations.
This model is implemented in the IdealRadioSignalFreeSpaceAttenuation and the
ScalarRadioSignalFreeSpaceAttenuation module.

TODO: other signal representations and attenuation models

2.8. Background Noise
---------------------

This model describes how the background noise changes over space and time. It
provides a noise signal for a requested time and space interval.

3. Communication Model
======================

This chapter contains the models that describe the process of the communication
on the radio medium. All communication models are implemented as C++ classes.

3.1. Transmission Request
-------------------------

The transmission request model contains parameters that control how the transmitter
produces the transmission. This data structure is attached as a control info object
to the MAC frame sent down from the MAC module to the radio.

The simplest parameters override the default transmission power and bitrate of
the transmitter. This is implemented in the RadioTransmissionRequest class.

3.2. Transmission
-----------------

The transmission model represents the transmission of a radio signal. All models
contain at least the start/end time, start/end antenna position, start/end antenna
orientation of the transmitter. These specify when, where and how the radio signal
started/ended to interact with the radio medium. There's one instance per
transmission of this model that is sent to all potential receiver radios in
separate radio frame instances.

The simplest transmission model extends the above with communication range,
interference range and detection range parameters. This is implemented in the
IdealRadioSignalTransmission class.

A more realistic but still quite simple transmission model specifies modulation,
carrier frequency, bandwidth and scalar power parameters. This is implemented in
the ScalarRadioSignalTransmission class.

TODO: DimensionalRadioSignalTransmission, LayeredRadioSignalTransmission, GNURadioSignalTransmission

3.3. Arrival
------------

The arrival model contains information about the space and time coordinates of a 
transmission arriving at a particular receiver. This contains at least the 
start/end time, start/end antenna position, start/end antenna orientation of the
receiver. The arrival data is produced by the propagation model of the radio medium.
There's one arrival instance per transmission per receiver. This is implemented
in the RadioSignalArrival class.

3.4 Noise
---------

The noise model represents a meaningless radio signal or the composition of 
multiple radio signals on the radio medium. All models contain at least the
start/end time and start/end position.

The simplest noise model specifies carrier frequency, bandwidth and power changing
over time parameters. This model is implemented in the ScalarRadioSignalNoise class.

3.5. Interference
-----------------

The interference of multiple radio signal transmissions at a particular receiver
radio is represented as a sequence of interfering receptions. This data structure
exists only temporarily during the computation of the reception decision. The 
receiver computes a noise signal that is the composition of the background noise
and all interfering receptions.

3.6. Reception
--------------

The reception model represents the reception of a radio signal transmission by a
particular radio. All models contain at least the start/end time, start/end
antenna position, start/end antenna orientation of the receiver. There's one
instance per transmission per receiver.

The simplest reception model extends the above with a reception power that is
one of receivable, interfering, detectable or undetectable. This is implemented
in the IdealRadioSignalReception class.

A more realistic but still quite simple reception model specifies modulation,
carrier frequency, bandwidth and scalar power parameters. This is implemented in
the ScalarRadioSignalReception class.

TODO: DimensionalRadioSignalReception, LayeredRadioSignalReception, GNURadioSignalReception

3.7. Reception Decision
-----------------------

The reception decision model describes the result of the reception process. It
specifies if the reception is possible at all, whether if it's attempted or not,
and finally if it's successful or failed.

3.8. Reception Indication
-------------------------

The reception indication model contains the physical properties of a successful
reception process. It may include among others the bit error flag, bit error rate,
bit error count, symbol error rate, symbol error count, sample error rate,
minimum/average/maximum receive signal strength indication (RSSI) and minimum 
signal to noise plus interference ratio (SNIR).

This data structure is attached as a control info object to the MAC frame that
is sent up from the radio to the MAC module. Note that all of the above is optional
and may be omitted if the receiver is configured to do so or if it doesn't support
providing that data.

3.9. Listening
--------------

The listening model specifies how a receiver is listening on the radio medium.
This may be used for optimization by simply ignoring certain transmissions either
during computing interference or even the complete reception of such transmissions.

The simplest listening model specifies modulation, carrier frequency and bandwidth
parameters. This is implemented in the ScalarRadioSignalListening class.

3.10. Listening Decision
-----------------------

The listening decision model describes the result of the listening process. It
specifies if the radio medium is idle or busy according to the receiver.

4. Communication Process
========================

This chapter describes the communication process focusing on how information
flows between actors.

4.1 Transmission
----------------

The transmission process starts when the radio module receives a MAC frame from
the MAC module. The MAC module must make sure that the radio is in transmitter
or transceiver mode before sending down the MAC frame, otherwise the radio throws
an exception.

Thereafter the transmitter converts the MAC frame to a radio signal. This process
depends on the configured level of detail and the selected radio signal representation.
The resulting radio signal is put into an OMNETPP packet called the radio frame.
This packet also encapsulates the received MAC frame, but it intentionally doesn't
contain anything else to avoid unnecessary duplication of data. 

In the next step the radio medium determines all affected radios. Which radio
constitutes affected depends on a number of factors that can be configured on
the radio medium using module parameters. It may depend among others the maximum
communication and interference range, the radio mode of the receiver, the listening
mode of the receiver, or even the MAC address of the receiver. 

Thereafter the propagation model determines the arrival time and position of the
transmission to all affected radios, and the radio medium sends them a shallow
copy of the radio frame. The radio sets its transmitter state to transmitting
and emits a transmitter state changed signal. Finally the radio schedules a timer
to the end of the transmission. This is the end of the transmission start event
that started with the MAC frame arriving to the radio.

The transmission end event starts when the above timer expires. The radio sets
its transmitter state back to idle and emits a transmitter state changed signal.
This notification indicates the completion of the transmission and the end of the
event.

Sometimes a radio might change its position, radio mode, listening mode or MAC
address and become affected by an ongoing transmission. In this case the radio
medium sends a radio frame along with the transmission that affects the radio.
Such transmissions may be still received successfully if the reception start is
in the future, otherwise they only affect the reception state.

The computing the transmission arrival times and positions may be done parallel
utilizing multiple CPUs or even the GPU. This may increase performance only if
the average number of potential receivers is high enough.

4.2 Reception
-------------

The reception process starts when the radio module receives a radio frame. The
MAC module must make sure that the radio is in receiver or transceiver mode before
the radio frame arrives, otherwise the incoming packet is just ignored.

The first thing that the radio determines is whether the reception is actually
attempted or not. This decision depends on the reception power, whether there's
another ongoing reception process and capturing is enabled or not. Then the radio
updates its receiver state to the appropriate value and emits a receiver state
changed signal. In any case it also schedules a timer to the end of the reception.
This is the end of the reception start event that started with the radio frame
arriving to the radio.

The reception end event starts when one of the above timer expires. If the timer 
corresponds to an attempted reception and the listening mode didn't change during
the reception, then the radio determines the reception decision. If the reception
is successful, then the encapsulated MAC frame is sent up to the MAC module with
the reception indication as a control info object.

The computation of the reception decision depends on the configured level of detail
and the selected radio signal representation. At first the radio medium determines
the background noise and all the interfering transmissions and their corresponding
receptions at the receiver. Finally the receiver computes the reception decision
by combining these data and the way it's listening on the radio medium. 

Whether the reception was successful or not the radio always updates its receiver
state to the appropriate value and emits a receiver state changed signal. This
notification indicates the completion of the reception and the end of the event.







Scratchpad
==========

packet domain:
 - part of MAC

bit domain:
 - cyclic redundancy check insertion/removal (CRC)
 - forward error correction coding/encoding (FEC)
 - bit interleaving/deinterleaving

symbol domain:
 - modulation/demodulation
 - pilot/preamble insertion/removal
 - spreading/despreading
 - antenna beamforming
 - space-time coding/decoding
 - spatial multiplexing/demultiplexing

sample or waveform domain:
 - pulse shaping/matching filter
 - carrier sensing/energy detection
 - synchronization/pll

analog domain:
 - DA/AD conversion
 - IF up/down conversion
 - PLL

model:
 - mobility (position)
 - antenna (mobility)
 - propagation (speed)
 - attenuation (free space: alpha)
 - background noise (isotropic: power)
 - radio (receiver antenna, transmitter antenna, codec, modem, shaper, converter)
 - radio medium (propagation, attenuation, background noise, radios, transmissions)
 - listening (??? filter model)
 - transmission (start position/time, end position/time, analog model)
 - reception (transmission, start position/time, end position/time, analog model)
 - noise (start position/time, end position/time, analog model)
 - loss (factor)
 - codec (coding scheme, header bit length, header bit rate, payload bit rate)
 - modem (modulation scheme, preamble symbol length)
 - shaper (?)
 - converter (power, carrier frequency, bandwidth)

transmission:
 - packet model (length, bits)
 - bit model (crc, fec, header bit length, total length, bits)
 - symbol model (modulation, preamble symbol length, total length, symbols)
 - sample model (pulse shape, length, samples)
 - analog model (power, duration, carrier frequency, bandwidth) 

reception:
 - analog model indication (snir)
 - sample model indication (rssi)
 - symbol model indication (symbol error rate, symbol error count)
 - bit model indication (bit error rate, bit error count)
 - packet model indication (packet error rate, packet successful)

algorithms:
 - compute CRC
 - check CRC
 - FEC encode
 - FEC decode
 - Modulate
 - Demodulate
 - Shape pulse
 - Filter pulse
 - insert preamble/pilot
 - synchronize

missing:
 - doppler shift
 - polarization
 - preamble/pilot/sychronization
 - mimo, antenna gain
