/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* Copy the first part of user declarations.  */
#line 1 "parser.y" /* yacc.c:339  */

/*
 * Copyright 2013 Google Inc.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
/*
 * Author: Author: ncardwell@google.com (Neal Cardwell)
 *
 * This is the parser for the packetdrill script language. It is
 * processed by the bison parser generator.
 *
 * For full documentation see: http://www.gnu.org/software/bison/manual/
 *
 * Here is a quick and dirty tutorial on bison:
 *
 * A bison parser specification is basically a BNF grammar for the
 * language you are parsing. Each rule specifies a nonterminal symbol
 * on the left-hand side and a sequence of terminal symbols (lexical
 * tokens) and or nonterminal symbols on the right-hand side that can
 * "reduce" to the symbol on the left hand side. When the parser sees
 * the sequence of symbols on the right where it "wants" to see a
 * nonterminal on the left, the rule fires, executing the semantic
 * action code in curly {} braces as it reduces the right hand side to
 * the left hand side.
 *
 * The semantic action code for a rule produces an output, which it
 * can reference using the $$ token. The set of possible types
 * returned in output expressions is given in the %union section of
 * the .y file. The specific type of the output for a terminal or
 * nonterminal symbol (corresponding to a field in the %union) is
 * given by the %type directive in the .y file. The action code can
 * access the outputs of the symbols on the right hand side by using
 * the notation $1 for the first symbol, $2 for the second symbol, and
 * so on.
 *
 * The lexer (generated by flex from lexer.l) feeds a stream of
 * terminal symbols up to this parser. Parser semantic actions can
 * access the lexer output for a terminal symbol with the same
 * notation they use for nonterminals.
 *
 */

/* The first part of the .y file consists of C code that bison copies
 * directly into the top of the .c file it generates.
 */

#if !defined(_GNU_SOURCE)
#define _GNU_SOURCE
#endif

#include "inet/common/INETDefs.h"

#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
#include <arpa/inet.h>
#include <netinet/in.h>
#else
#include "winsock2.h"
#endif
#include <stdio.h>
#include <ctype.h>
#include <errno.h>
#include <fcntl.h>
#include <pthread.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#include "PacketDrillUtils.h"
#include "PacketDrill.h"


/* This include of the bison-generated .h file must go last so that we
 * can first include all of the declarations on which it depends.
 */
#include "parser.h"

/* Change this YYDEBUG to 1 to get verbose debug output for parsing: */
#define YYDEBUG 0
#if YYDEBUG
extern int yydebug;
#endif

extern FILE *yyin;
extern int yylineno;
extern int yywrap(void);
extern char *yytext;
extern int yylex(void);
extern int yyparse(void);

/* The input to the parser: the path name of the script file to parse. */
static const char* current_script_path = NULL;

/* The starting line number of the input script statement that we're
 * currently parsing. This may be different than yylineno if bison had
 * to look ahead and lexically scan a token on the following line to
 * decide that the current statement is done.
 */
static int current_script_line = -1;

/*
 * We use this object to look up configuration info needed during
 * parsing.
 */
static PacketDrillConfig *in_config = NULL;

/* The output of the parser: an output script containing
 * 1) a linked list of options
 * 2) a linked list of events
 */
static PacketDrillScript *out_script = NULL;


/* The test invocation to pass back to parse_and_finalize_config(). */
struct invocation *invocation;

/* This standard callback is invoked by flex when it encounters
 * the end of a file. We return 1 to tell flex to return EOF.
 */
int yywrap(void)
{
    return 1;
}


/* The public entry point for the script parser. Parses the
 * text script file with the given path name and fills in the script
 * object with the parsed representation.
 */
int parse_script(PacketDrillConfig *config, PacketDrillScript *script, struct invocation *callback_invocation){
    /* This bison-generated parser is not multi-thread safe, so we
     * have a lock to prevent more than one thread using the
     * parser at the same time. This is useful in the wire server
     * context, where in general we may have more than one test
     * thread running at the same time.
     */

#if YYDEBUG
    yydebug = 1;
#endif

    /* Now parse the script from our buffer. */
    yyin = fopen(script->getScriptPath(), "r");
    if (!yyin)
        printf("fopen: parse error opening script buffer");
    current_script_path = config->getScriptPath();
    in_config = config;
    out_script = script;
    invocation = callback_invocation;

    /* We have to reset the line number here since the wire server
     * can do more than one yyparse().
     */
    yylineno = 1;
    int result = yyparse(); /* invoke bison-generated parser */
    current_script_path = NULL;
    if (fclose(yyin))
        printf("fclose: error closing script buffer");

    /* Unlock parser. */

    return result ? -1 : 0;
}

/* Bison emits code to call this method when there's a parse-time error.
 * We print the line number and the error message.
 */
static void yyerror(const char *message) {
    fprintf(stderr, "%s:%d: parse error at '%s': %s\n",
        current_script_path, yylineno, yytext, message);
}


/* Create and initalize a new integer expression with the given
 * literal value and format string.
 */
static PacketDrillExpression *new_integer_expression(int64 num, const char *format) {
    PacketDrillExpression *expression = new PacketDrillExpression(EXPR_INTEGER);
    expression->setNum(num);
    expression->setFormat(format);
    return expression;
}


/* Create and initialize a new option. */
/*static struct option_list *new_option(char *name, char *value)
{
    return NULL;
}*/


#line 273 "parser.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "parser.h".  */
#ifndef YY_YY_PARSER_H_INCLUDED
# define YY_YY_PARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ELLIPSIS = 258,
    UDP = 259,
    ACK = 260,
    WIN = 261,
    WSCALE = 262,
    MSS = 263,
    NOP = 264,
    TIMESTAMP = 265,
    ECR = 266,
    EOL = 267,
    TCPSACK = 268,
    VAL = 269,
    SACKOK = 270,
    OPTION = 271,
    CHUNK = 272,
    MYDATA = 273,
    MYINIT = 274,
    MYINIT_ACK = 275,
    MYHEARTBEAT = 276,
    MYHEARTBEAT_ACK = 277,
    MYABORT = 278,
    MYSHUTDOWN = 279,
    MYSHUTDOWN_ACK = 280,
    MYERROR = 281,
    MYCOOKIE_ECHO = 282,
    MYCOOKIE_ACK = 283,
    MYSHUTDOWN_COMPLETE = 284,
    HEARTBEAT_INFORMATION = 285,
    CAUSE_INFO = 286,
    MYSACK = 287,
    STATE_COOKIE = 288,
    PARAMETER = 289,
    MYSCTP = 290,
    TYPE = 291,
    FLAGS = 292,
    LEN = 293,
    TAG = 294,
    A_RWND = 295,
    OS = 296,
    IS = 297,
    TSN = 298,
    SID = 299,
    SSN = 300,
    PPID = 301,
    CUM_TSN = 302,
    GAPS = 303,
    DUPS = 304,
    MYFLOAT = 305,
    INTEGER = 306,
    HEX_INTEGER = 307,
    MYWORD = 308,
    MYSTRING = 309
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 213 "parser.y" /* yacc.c:355  */

    int64 integer;
    double floating;
    char *string;
    char *reserved;
    int64 time_usecs;
    enum direction_t direction;
    uint16 port;
    int32 window;
    uint32 sequence_number;
    struct {
        int protocol;    /* IPPROTO_TCP or IPPROTO_UDP */
        uint32 start_sequence;
        uint16 payload_bytes;
    } tcp_sequence_info;
    struct option_list *option;
    PacketDrillEvent *event;
    PacketDrillPacket *packet;
    struct syscall_spec *syscall;
    PacketDrillStruct *sack_block;
    PacketDrillExpression *expression;
    cQueue *expression_list;
    PacketDrillTcpOption *tcp_option;
    PacketDrillSctpParameter *sctp_parameter;
    cQueue *tcp_options;
    struct errno_spec *errno_info;
    cQueue *sctp_chunk_list;
    cQueue *sctp_parameter_list;
    cQueue *sack_block_list;
    PacketDrillBytes *byte_list;
    uint8 byte;
    PacketDrillSctpChunk *sctp_chunk;

#line 402 "parser.cc" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


extern YYSTYPE yylval;
extern YYLTYPE yylloc;
int yyparse (void);

#endif /* !YY_YY_PARSER_H_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 431 "parser.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  11
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   363

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  70
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  78
/* YYNRULES -- Number of rules.  */
#define YYNRULES  169
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  374

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   309

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      58,    59,    56,    55,    61,    68,    67,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    60,     2,
      65,    62,    66,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    63,     2,    64,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    69,     2,    57,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   305,   305,   312,   316,   323,   353,   359,   365,   370,
     377,   387,   393,   402,   405,   412,   415,   418,   424,   450,
     470,   486,   488,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   510,   511,   517,   526,   527,
     536,   537,   538,   542,   543,   548,   554,   563,   564,   570,
     576,   621,   622,   628,   634,   658,   659,   665,   671,   696,
     697,   706,   707,   716,   717,   726,   727,   736,   737,   746,
     747,   756,   757,   767,   768,   774,   783,   784,   793,   794,
     795,   800,   801,   802,   807,   816,   821,   826,   831,   837,
     843,   848,   853,   858,   874,   879,   884,   885,   889,   893,
     901,   902,   907,   910,   927,   930,   933,   943,   951,   955,
     962,   965,   968,   976,   982,  1002,  1005,  1014,  1017,  1026,
    1029,  1032,  1039,  1043,  1051,  1054,  1057,  1064,  1071,  1074,
    1078,  1095,  1099,  1105,  1106,  1110,  1116,  1128,  1129,  1133,
    1139,  1151,  1170,  1182,  1185,  1191,  1198,  1201,  1207,  1211,
    1218,  1221,  1223,  1226,  1230,  1235,  1240,  1243,  1251,  1257,
    1263,  1274,  1278,  1287,  1290,  1298,  1301,  1307,  1313,  1316
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ELLIPSIS", "UDP", "ACK", "WIN",
  "WSCALE", "MSS", "NOP", "TIMESTAMP", "ECR", "EOL", "TCPSACK", "VAL",
  "SACKOK", "OPTION", "CHUNK", "MYDATA", "MYINIT", "MYINIT_ACK",
  "MYHEARTBEAT", "MYHEARTBEAT_ACK", "MYABORT", "MYSHUTDOWN",
  "MYSHUTDOWN_ACK", "MYERROR", "MYCOOKIE_ECHO", "MYCOOKIE_ACK",
  "MYSHUTDOWN_COMPLETE", "HEARTBEAT_INFORMATION", "CAUSE_INFO", "MYSACK",
  "STATE_COOKIE", "PARAMETER", "MYSCTP", "TYPE", "FLAGS", "LEN", "TAG",
  "A_RWND", "OS", "IS", "TSN", "SID", "SSN", "PPID", "CUM_TSN", "GAPS",
  "DUPS", "MYFLOAT", "INTEGER", "HEX_INTEGER", "MYWORD", "MYSTRING", "'+'",
  "'*'", "'~'", "'('", "')'", "':'", "','", "'='", "'['", "']'", "'<'",
  "'>'", "'.'", "'-'", "'|'", "$accept", "script", "events", "event",
  "event_time", "time", "action", "packet_spec", "tcp_packet_spec",
  "udp_packet_spec", "sctp_packet_spec", "sctp_chunk_list", "sctp_chunk",
  "opt_flags", "opt_len", "opt_val", "byte_list", "byte", "opt_data_flags",
  "opt_abort_flags", "opt_shutdown_complete_flags", "opt_tag",
  "opt_a_rwnd", "opt_os", "opt_is", "opt_tsn", "opt_sid", "opt_ssn",
  "opt_ppid", "opt_cum_tsn", "opt_gaps", "opt_dups",
  "sctp_data_chunk_spec", "sctp_init_chunk_spec",
  "sctp_init_ack_chunk_spec", "sctp_sack_chunk_spec",
  "sctp_heartbeat_chunk_spec", "sctp_heartbeat_ack_chunk_spec",
  "sctp_abort_chunk_spec", "sctp_shutdown_chunk_spec",
  "sctp_shutdown_ack_chunk_spec", "sctp_cookie_echo_chunk_spec",
  "sctp_cookie_ack_chunk_spec", "sctp_shutdown_complete_chunk_spec",
  "opt_parameter_list", "sctp_parameter_list", "sctp_parameter",
  "sctp_heartbeat_information_parameter", "sctp_state_cookie_parameter",
  "packet_prefix", "direction", "flags", "seq", "opt_ack", "opt_window",
  "opt_tcp_options", "tcp_option_list", "tcp_option", "sack_block_list",
  "gap_list", "gap", "dup_list", "dup", "sack_block", "syscall_spec",
  "opt_end_time", "function_name", "function_arguments", "expression_list",
  "expression", "decimal_integer", "hex_integer", "binary_expression",
  "array", "opt_errno", "opt_note", "note", "word_list", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    43,    42,   126,    40,    41,
      58,    44,    61,    91,    93,    60,    62,    46,    45,   124
};
# endif

#define YYPACT_NINF -199

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-199)))

#define YYTABLE_NINF -1

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     109,  -199,  -199,   112,  -199,    28,   109,  -199,     1,   -27,
     -14,  -199,  -199,   112,  -199,  -199,  -199,  -199,  -199,  -199,
    -199,    -4,  -199,  -199,    57,   112,    60,  -199,    59,    68,
      65,  -199,  -199,    86,  -199,   103,  -199,   112,   121,    84,
    -199,   113,   169,    19,   114,  -199,   116,   117,   118,   119,
     120,   122,   123,   125,   126,   127,   128,   129,   130,   133,
    -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,
    -199,  -199,  -199,   136,   144,   171,  -199,  -199,  -199,  -199,
     175,  -199,     5,   -40,   110,  -199,  -199,  -199,  -199,    -1,
    -199,   147,   159,   159,   159,   159,   160,   159,   159,   159,
     159,   161,   159,    84,   141,  -199,   149,   137,  -199,  -199,
      61,  -199,    -1,    -1,   -42,   139,   142,   145,   148,   150,
     151,   152,   146,   140,   153,   154,   155,   156,   157,   158,
     162,  -199,   164,  -199,   111,  -199,  -199,   110,   110,   163,
     163,    32,   167,     3,   178,   178,   176,   176,    35,  -199,
     177,  -199,   167,  -199,    38,  -199,   177,   166,   165,   179,
     181,  -199,   196,  -199,   182,  -199,   -43,  -199,   173,  -199,
    -199,  -199,  -199,  -199,  -199,  -199,   172,   168,  -199,  -199,
    -199,   174,   180,   183,   184,   185,   186,  -199,  -199,  -199,
    -199,   189,   188,   187,  -199,  -199,  -199,  -199,   192,  -199,
    -199,  -199,  -199,   191,   194,   182,  -199,   143,  -199,  -199,
     -33,    26,   195,    41,   197,   197,     2,  -199,  -199,    42,
    -199,   213,   197,   217,   204,  -199,  -199,  -199,  -199,  -199,
    -199,   198,   200,  -199,  -199,   201,   203,   205,   193,   206,
    -199,  -199,   207,   208,   209,   211,  -199,    43,   199,    44,
     215,   215,  -199,   213,    11,  -199,   210,  -199,  -199,  -199,
     212,   214,  -199,  -199,   216,   218,   219,   220,  -199,     9,
     221,   224,    45,   190,    76,   223,   223,  -199,   222,  -199,
    -199,    78,  -199,    12,   227,  -199,  -199,   225,   228,  -199,
    -199,   226,   229,   230,  -199,   115,  -199,  -199,    94,   231,
     232,    95,   235,    96,   195,   195,  -199,   233,   234,    79,
    -199,    13,  -199,  -199,  -199,   236,   237,  -199,  -199,   238,
     238,  -199,   241,   244,  -199,  -199,    97,    29,  -199,     6,
     239,   240,  -199,  -199,   242,   245,    80,  -199,  -199,  -199,
    -199,  -199,   246,   247,  -199,  -199,  -199,  -199,  -199,  -199,
     249,   251,  -199,     4,   124,  -199,  -199,   243,   248,  -199,
    -199,    98,   250,   252,   254,   257,   253,   255,   256,   270,
     258,   259,  -199,  -199
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,    11,    12,     0,     8,     0,     2,     3,   143,     7,
       6,     1,     4,     0,   108,   109,     5,    13,    15,    16,
      17,     0,   107,    14,     0,     0,     0,   144,     0,     0,
     110,   111,   113,     0,   145,     0,     9,     0,     0,     0,
     112,     0,   115,     0,     0,    10,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    20,
      21,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,     0,     0,   117,   150,   158,   159,   153,
     154,   146,     0,     0,   148,   151,   152,   156,   157,     0,
      19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   116,     0,   119,   155,   161,
       0,   147,     0,     0,   163,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    22,     0,   118,     0,    18,   162,   149,   160,     0,
     165,     0,     0,     0,     0,     0,     0,     0,     0,    90,
       0,    92,     0,    94,     0,    95,     0,     0,     0,     0,
       0,   124,     0,   125,     0,   128,     0,   122,     0,   164,
     142,   166,    47,    49,    48,    50,     0,     0,    35,    37,
      36,     0,     0,     0,     0,     0,     0,    51,    53,    52,
      54,     0,     0,     0,    55,    57,    56,    58,     0,   114,
     121,   127,   126,     0,     0,   129,   131,     0,   120,   168,
       0,     0,     0,     0,     0,     0,     0,    88,    89,     0,
      91,     0,     0,     0,     0,   132,   123,   169,   167,    38,
      39,     0,     0,    59,    60,     0,     0,     0,     0,     0,
      76,    77,     0,     0,     0,     0,   141,     0,     0,     0,
       0,     0,   102,     0,     0,    93,     0,   130,    67,    68,
       0,     0,    61,    62,     0,     0,     0,     0,    40,     0,
       0,     0,     0,     0,     0,     0,     0,   103,     0,    46,
      45,     0,    43,     0,     0,    69,    70,     0,     0,    63,
      64,     0,     0,     0,    41,     0,    42,    78,   133,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
     134,     0,    87,    71,    72,     0,     0,    65,    66,     0,
       0,    79,     0,     0,    80,    81,   137,     0,    84,     0,
       0,     0,   136,   135,     0,     0,     0,   138,    73,    74,
      75,    96,     0,    97,    98,   100,   101,    85,    86,    82,
       0,     0,    83,     0,     0,   140,   139,     0,     0,    99,
     104,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   105,   106
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -199,  -199,  -199,   271,  -199,     0,  -199,  -199,  -199,  -199,
    -199,  -199,   260,    36,  -151,   -13,  -199,   -56,  -199,  -199,
    -199,   100,  -198,    -5,    40,  -136,  -199,  -199,  -199,   170,
    -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,  -199,
    -199,  -199,  -199,  -199,   -38,  -199,   -36,    24,  -199,  -199,
    -199,  -199,  -199,  -199,  -199,  -199,  -199,   105,  -199,  -199,
      -9,  -199,   -32,   131,  -199,  -199,  -199,  -199,   261,   -79,
    -199,  -199,  -199,  -199,  -199,  -199,   202,  -199
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,     5,     6,     7,     8,     9,    16,    17,    18,    19,
      20,    59,    60,   118,   177,   243,   281,   282,   116,   123,
     129,   182,   236,   265,   292,   232,   261,   288,   316,   192,
     271,   300,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,   330,   343,   344,   345,   346,    21,
      22,    33,    42,    75,   107,   135,   166,   167,   205,   309,
     310,   336,   337,   206,    23,    24,    35,    44,    83,    84,
      85,    86,    87,    88,   140,   170,   169,   210
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_uint16 yytable[] =
{
      28,   193,    76,    10,    13,   238,   178,   357,    76,   341,
     114,   139,   278,    27,   268,   297,   325,   237,   207,   111,
     227,   112,    76,   208,   244,    36,   228,   113,    11,   229,
      25,    29,   338,   137,   138,   172,   184,    45,   187,   342,
     176,   194,   358,    26,   233,   240,   258,   262,   285,    30,
      77,    78,    79,    80,   179,   180,    77,    78,    79,    80,
     279,   280,    82,    31,    32,   239,    14,    15,    82,   109,
      77,    78,    79,    80,   269,   298,   326,   230,    81,   289,
     339,   340,    82,   173,   174,   175,   188,   189,   190,   195,
     196,   197,   234,   241,   259,   263,   286,   307,   313,   317,
     334,   362,    47,    48,    49,    50,    51,    52,    53,    54,
      34,    55,    56,    57,   158,    37,    58,    38,   159,   160,
     161,   162,   112,   163,   164,   136,   165,   290,    39,   119,
     120,   121,    40,   124,   125,   126,   127,    41,   130,   295,
     323,   351,   296,   324,   352,   308,   314,   318,   335,   363,
     159,   160,   161,   162,   184,   163,   164,   342,   165,     1,
       2,    43,     1,     2,     3,     4,   279,   280,   319,   320,
     185,   186,    46,    73,    74,    90,    89,   106,   108,   113,
      91,    92,    93,    94,   115,    95,    96,   104,    97,    98,
      99,   100,   101,   102,   103,   105,   117,   122,   128,   132,
     133,   141,   134,   142,   149,   176,   184,   143,   148,   144,
     203,   145,   146,   147,   150,   157,   152,   181,   151,   154,
     153,   168,   155,   156,   191,   199,   209,   242,   245,   212,
     201,   200,   202,   204,   211,   287,   213,   235,   231,   306,
     267,   214,   223,   260,   215,   183,   266,   216,   221,   217,
     218,   219,   220,   222,   224,   246,   264,   252,   270,   370,
     247,   248,   257,   249,   250,   291,   251,   253,   366,   254,
     256,   367,   255,   371,   272,   273,   299,    12,   274,   275,
     276,   315,   331,   283,   277,   284,   294,   301,   303,   302,
     304,   305,   332,   311,   322,   308,   312,   321,   327,   329,
     355,   328,   335,   347,   348,   350,   349,   360,   354,   353,
     361,   364,   226,   365,   333,   368,   293,   369,   359,   356,
       0,     0,   372,   373,     0,     0,   198,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
       0,     0,   171,   110,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131
};

static const yytype_int16 yycheck[] =
{
       4,   152,     3,     3,     3,     3,     3,     3,     3,     3,
      89,    53,     3,    13,     3,     3,     3,   215,    61,    59,
      53,    61,     3,    66,   222,    25,    59,    69,     0,     3,
      57,    35,     3,   112,   113,     3,    30,    37,     3,    33,
      38,     3,    38,    57,     3,     3,     3,     3,     3,    53,
      51,    52,    53,    54,    51,    52,    51,    52,    53,    54,
      51,    52,    63,    67,    68,   216,    65,    66,    63,    64,
      51,    52,    53,    54,    63,    63,    63,    51,    59,     3,
      51,    52,    63,    51,    52,    53,    51,    52,    53,    51,
      52,    53,    51,    51,    51,    51,    51,     3,     3,     3,
       3,     3,    18,    19,    20,    21,    22,    23,    24,    25,
      53,    27,    28,    29,     3,    55,    32,    58,     7,     8,
       9,    10,    61,    12,    13,    64,    15,    51,    60,    93,
      94,    95,    67,    97,    98,    99,   100,    51,   102,    61,
      61,    61,    64,    64,    64,    51,    51,    51,    51,    51,
       7,     8,     9,    10,    30,    12,    13,    33,    15,    50,
      51,    58,    50,    51,    55,    56,    51,    52,   304,   305,
     146,   147,    51,    60,     5,    59,    62,     6,     3,    69,
      63,    63,    63,    63,    37,    63,    63,    51,    63,    63,
      63,    63,    63,    63,    61,    51,    37,    37,    37,    58,
      51,    62,    65,    61,    64,    38,    30,    62,    62,    61,
      14,    61,    61,    61,    61,    51,    61,    39,    64,    62,
      64,    58,    64,    61,    47,    59,    53,    14,    11,    61,
      51,    66,    51,    51,    62,    45,    62,    40,    43,   295,
     253,    61,    51,    44,    61,   145,   251,    63,    61,    64,
      64,    62,    64,    61,    60,    51,    41,    64,    48,     3,
      62,    61,    51,    62,    61,    42,    61,    61,    14,    62,
      61,    14,    64,     3,    62,    61,    49,     6,    62,    61,
      61,    46,   320,    62,    64,    61,    64,    62,    62,    61,
      61,    61,    51,    62,    60,    51,    64,    64,    62,    61,
      51,    64,    51,    64,    64,    60,    64,    64,    61,    63,
      62,    61,   207,    61,   323,    62,   276,    62,   354,   351,
      -1,    -1,    64,    64,    -1,    -1,   156,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
      -1,    -1,   140,    82,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   103
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,    50,    51,    55,    56,    71,    72,    73,    74,    75,
      75,     0,    73,     3,    65,    66,    76,    77,    78,    79,
      80,   119,   120,   134,   135,    57,    57,    75,     4,    35,
      53,    67,    68,   121,    53,   136,    75,    55,    58,    60,
      67,    51,   122,    58,   137,    75,    51,    18,    19,    20,
      21,    22,    23,    24,    25,    27,    28,    29,    32,    81,
      82,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,    60,     5,   123,     3,    51,    52,    53,
      54,    59,    63,   138,   139,   140,   141,   142,   143,    62,
      59,    63,    63,    63,    63,    63,    63,    63,    63,    63,
      63,    63,    63,    61,    51,    51,     6,   124,     3,    64,
     138,    59,    61,    69,   139,    37,    88,    37,    83,    83,
      83,    83,    37,    89,    83,    83,    83,    83,    37,    90,
      83,    82,    58,    51,    65,   125,    64,   139,   139,    53,
     144,    62,    61,    62,    61,    61,    61,    61,    62,    64,
      61,    64,    61,    64,    62,    64,    61,    51,     3,     7,
       8,     9,    10,    12,    13,    15,   126,   127,    58,   146,
     145,   146,     3,    51,    52,    53,    38,    84,     3,    51,
      52,    39,    91,    91,    30,   117,   117,     3,    51,    52,
      53,    47,    99,    84,     3,    51,    52,    53,    99,    59,
      66,    51,    51,    14,    51,   128,   133,    61,    66,    53,
     147,    62,    61,    62,    61,    61,    63,    64,    64,    62,
      64,    61,    61,    51,    60,   133,   127,    53,    59,     3,
      51,    43,    95,     3,    51,    40,    92,    92,     3,    84,
       3,    51,    14,    85,    92,    11,    51,    62,    61,    62,
      61,    61,    64,    61,    62,    64,    61,    51,     3,    51,
      44,    96,     3,    51,    41,    93,    93,    85,     3,    63,
      48,   100,    62,    61,    62,    61,    61,    64,     3,    51,
      52,    86,    87,    62,    61,     3,    51,    45,    97,     3,
      51,    42,    94,    94,    64,    61,    64,     3,    63,    49,
     101,    62,    61,    62,    61,    61,    87,     3,    51,   129,
     130,    62,    64,     3,    51,    46,    98,     3,    51,    95,
      95,    64,    60,    61,    64,     3,    63,    62,    64,    61,
     114,   114,    51,   130,     3,    51,   131,   132,     3,    51,
      52,     3,    33,   115,   116,   117,   118,    64,    64,    64,
      60,    61,    64,    63,    61,    51,   132,     3,    38,   116,
      64,    62,     3,    51,    61,    61,    14,    14,    62,    62,
       3,     3,    64,    64
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    70,    71,    72,    72,    73,    74,    74,    74,    74,
      74,    75,    75,    76,    76,    77,    77,    77,    78,    79,
      80,    81,    81,    82,    82,    82,    82,    82,    82,    82,
      82,    82,    82,    82,    82,    83,    83,    83,    84,    84,
      85,    85,    85,    86,    86,    87,    87,    88,    88,    88,
      88,    89,    89,    89,    89,    90,    90,    90,    90,    91,
      91,    92,    92,    93,    93,    94,    94,    95,    95,    96,
      96,    97,    97,    98,    98,    98,    99,    99,   100,   100,
     100,   101,   101,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   114,   115,   115,
     116,   116,   117,   117,   118,   118,   118,   119,   120,   120,
     121,   121,   121,   121,   122,   123,   123,   124,   124,   125,
     125,   125,   126,   126,   127,   127,   127,   127,   127,   127,
     127,   128,   128,   129,   129,   129,   130,   131,   131,   131,
     132,   133,   134,   135,   135,   136,   137,   137,   138,   138,
     139,   139,   139,   139,   139,   139,   139,   139,   140,   141,
     142,   143,   143,   144,   144,   145,   145,   146,   147,   147
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     2,     2,     2,     1,     1,     3,
       5,     1,     1,     1,     1,     1,     1,     1,     6,     5,
       4,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     5,     5,     1,     3,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       5,     3,     5,     5,    14,    15,    15,    12,     6,     6,
       4,     6,     4,     8,     4,     4,     2,     2,     1,     3,
       1,     1,     4,     6,     4,    10,    10,     1,     1,     1,
       1,     1,     2,     1,     6,     0,     2,     0,     2,     0,
       3,     3,     1,     3,     1,     1,     2,     2,     1,     2,
       5,     1,     2,     0,     1,     3,     3,     0,     1,     3,
       3,     3,     7,     0,     2,     1,     2,     3,     1,     3,
       1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
       3,     2,     3,     0,     2,     0,     1,     3,     1,     2
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Location data for the lookahead symbol.  */
YYLTYPE yylloc
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 305 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = NULL;    /* The parser output is in out_script */
}
#line 1878 "parser.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 312 "parser.y" /* yacc.c:1646  */
    {
    out_script->addEvent((yyvsp[0].event));    /* save pointer to event list as output of parser */
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 1887 "parser.cc" /* yacc.c:1646  */
    break;

  case 4:
#line 316 "parser.y" /* yacc.c:1646  */
    {
    out_script->addEvent((yyvsp[0].event));
    (yyval.event) = (yyvsp[0].event);    /* return the tail so that we can append to it */
}
#line 1896 "parser.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 323 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = (yyvsp[0].event);
    (yyval.event)->setLineNumber((yyvsp[-1].event)->getLineNumber());    /* use timestamp's line */
    (yyval.event)->setEventTime((yyvsp[-1].event)->getEventTime());
    (yyval.event)->setEventTimeEnd((yyvsp[-1].event)->getEventTimeEnd());
    (yyval.event)->setTimeType((yyvsp[-1].event)->getTimeType());
    (yyvsp[-1].event)->getLineNumber(),
    (yyvsp[-1].event)->getEventTime().dbl(),
    (yyvsp[-1].event)->getEventTimeEnd().dbl(),
    (yyvsp[-1].event)->getTimeType();
    if ((yyval.event)->getEventTimeEnd() != NO_TIME_RANGE) {
        if ((yyval.event)->getEventTimeEnd() < (yyval.event)->getEventTime())
            printf("Semantic error: time range is backwards");
    }
    if ((yyval.event)->getTimeType() == ANY_TIME &&  ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        printf("Semantic error: event time <star> can only be used with outbound packets");
    } else if (((yyval.event)->getTimeType() == ABSOLUTE_RANGE_TIME ||
        (yyval.event)->getTimeType() == RELATIVE_RANGE_TIME) &&
        ((yyval.event)->getType() != PACKET_EVENT ||
        ((yyval.event)->getPacket())->getDirection() != DIRECTION_OUTBOUND)) {
        yylineno = (yyval.event)->getLineNumber();
        printf("Semantic error: event time range can only be used with outbound packets");
    }
    free((yyvsp[-1].event));
}
#line 1928 "parser.cc" /* yacc.c:1646  */
    break;

  case 6:
#line 353 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(RELATIVE_TIME);
}
#line 1939 "parser.cc" /* yacc.c:1646  */
    break;

  case 7:
#line 359 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setEventTime((yyvsp[0].time_usecs));
    (yyval.event)->setTimeType(ABSOLUTE_TIME);
}
#line 1950 "parser.cc" /* yacc.c:1646  */
    break;

  case 8:
#line 365 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[0]).first_line);
    (yyval.event)->setTimeType(ANY_TIME);
}
#line 1960 "parser.cc" /* yacc.c:1646  */
    break;

  case 9:
#line 370 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-2]).first_line);
    (yyval.event)->setTimeType(ABSOLUTE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-2].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 1972 "parser.cc" /* yacc.c:1646  */
    break;

  case 10:
#line 377 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(INVALID_EVENT);
    (yyval.event)->setLineNumber((yylsp[-4]).first_line);
    (yyval.event)->setTimeType(RELATIVE_RANGE_TIME);
    (yyval.event)->setEventTime((yyvsp[-3].time_usecs));
    (yyval.event)->setEventTimeEnd((yyvsp[0].time_usecs));
}
#line 1984 "parser.cc" /* yacc.c:1646  */
    break;

  case 11:
#line 387 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].floating) < 0) {
        printf("Semantic error: negative time");
    }
    (yyval.time_usecs) = (int64)((yyvsp[0].floating) * 1.0e6); /* convert float secs to s64 microseconds */
}
#line 1995 "parser.cc" /* yacc.c:1646  */
    break;

  case 12:
#line 393 "parser.y" /* yacc.c:1646  */
    {
    if ((yyvsp[0].integer) < 0) {
        printf("Semantic error: negative time");
    }
    (yyval.time_usecs) = (int64)((yyvsp[0].integer) * 1000000); /* convert int secs to s64 microseconds */
}
#line 2006 "parser.cc" /* yacc.c:1646  */
    break;

  case 13:
#line 402 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(PACKET_EVENT);  (yyval.event)->setPacket((yyvsp[0].packet));
}
#line 2014 "parser.cc" /* yacc.c:1646  */
    break;

  case 14:
#line 405 "parser.y" /* yacc.c:1646  */
    {
    (yyval.event) = new PacketDrillEvent(SYSCALL_EVENT);
    (yyval.event)->setSyscall((yyvsp[0].syscall));
}
#line 2023 "parser.cc" /* yacc.c:1646  */
    break;

  case 15:
#line 412 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2031 "parser.cc" /* yacc.c:1646  */
    break;

  case 16:
#line 415 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2039 "parser.cc" /* yacc.c:1646  */
    break;

  case 17:
#line 418 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = (yyvsp[0].packet);
}
#line 2047 "parser.cc" /* yacc.c:1646  */
    break;

  case 18:
#line 424 "parser.y" /* yacc.c:1646  */
    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-5].packet), *inner = NULL;
    enum direction_t direction = outer->getDirection();

    if (((yyvsp[0].tcp_options) == NULL) && (direction != DIRECTION_OUTBOUND)) {
        yylineno = (yylsp[0]).first_line;
        printf("<...> for TCP options can only be used with outbound packets");
    }
    cPacket* pkt = PacketDrill::buildTCPPacket(in_config->getWireProtocol(), direction,
                                               (yyvsp[-4].string),
                                               (yyvsp[-3].tcp_sequence_info).start_sequence, (yyvsp[-3].tcp_sequence_info).payload_bytes,
                                               (yyvsp[-2].sequence_number), (yyvsp[-1].window), (yyvsp[0].tcp_options), &error);

    free((yyvsp[-4].string));

    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);

    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2075 "parser.cc" /* yacc.c:1646  */
    break;

  case 19:
#line 450 "parser.y" /* yacc.c:1646  */
    {
    char *error = NULL;
    PacketDrillPacket *outer = (yyvsp[-4].packet), *inner = NULL;

    enum direction_t direction = outer->getDirection();

    cPacket* pkt = PacketDrill::buildUDPPacket(in_config->getWireProtocol(), direction, (yyvsp[-1].integer), &error);
    if (direction == DIRECTION_INBOUND)
        pkt->setName("parserInbound");
    else
        pkt->setName("parserOutbound");
    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);
    inner->setDirection(direction);

    (yyval.packet) = inner;
}
#line 2097 "parser.cc" /* yacc.c:1646  */
    break;

  case 20:
#line 470 "parser.y" /* yacc.c:1646  */
    {
    PacketDrillPacket *outer = (yyvsp[-3].packet), *inner = NULL;
    enum direction_t direction = outer->getDirection();
    cPacket* pkt = PacketDrill::buildSCTPPacket(in_config->getWireProtocol(), direction, (yyvsp[0].sctp_chunk_list));
    if (direction == DIRECTION_INBOUND)
        pkt->setName("parserInbound");
    else
        pkt->setName("parserOutbound");
    inner = new PacketDrillPacket();
    inner->setInetPacket(pkt);
    inner->setDirection(direction);
    (yyval.packet) = inner;
}
#line 2115 "parser.cc" /* yacc.c:1646  */
    break;

  case 21:
#line 486 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk_list) = new cQueue("sctpChunkList");
                                   (yyval.sctp_chunk_list)->insert((cObject*)(yyvsp[0].sctp_chunk)); }
#line 2122 "parser.cc" /* yacc.c:1646  */
    break;

  case 22:
#line 488 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk_list) = (yyvsp[-2].sctp_chunk_list);
                                   (yyvsp[-2].sctp_chunk_list)->insert((yyvsp[0].sctp_chunk)); }
#line 2129 "parser.cc" /* yacc.c:1646  */
    break;

  case 23:
#line 494 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2135 "parser.cc" /* yacc.c:1646  */
    break;

  case 24:
#line 495 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2141 "parser.cc" /* yacc.c:1646  */
    break;

  case 25:
#line 496 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2147 "parser.cc" /* yacc.c:1646  */
    break;

  case 26:
#line 497 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2153 "parser.cc" /* yacc.c:1646  */
    break;

  case 27:
#line 498 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2159 "parser.cc" /* yacc.c:1646  */
    break;

  case 28:
#line 499 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2165 "parser.cc" /* yacc.c:1646  */
    break;

  case 29:
#line 500 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2171 "parser.cc" /* yacc.c:1646  */
    break;

  case 30:
#line 501 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2177 "parser.cc" /* yacc.c:1646  */
    break;

  case 31:
#line 502 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2183 "parser.cc" /* yacc.c:1646  */
    break;

  case 32:
#line 503 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2189 "parser.cc" /* yacc.c:1646  */
    break;

  case 33:
#line 504 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2195 "parser.cc" /* yacc.c:1646  */
    break;

  case 34:
#line 505 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_chunk) = (yyvsp[0].sctp_chunk); }
#line 2201 "parser.cc" /* yacc.c:1646  */
    break;

  case 35:
#line 510 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2207 "parser.cc" /* yacc.c:1646  */
    break;

  case 36:
#line 511 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2218 "parser.cc" /* yacc.c:1646  */
    break;

  case 37:
#line 517 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2229 "parser.cc" /* yacc.c:1646  */
    break;

  case 38:
#line 526 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2235 "parser.cc" /* yacc.c:1646  */
    break;

  case 39:
#line 527 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: length value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2246 "parser.cc" /* yacc.c:1646  */
    break;

  case 40:
#line 536 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = NULL; }
#line 2252 "parser.cc" /* yacc.c:1646  */
    break;

  case 41:
#line 537 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = NULL; }
#line 2258 "parser.cc" /* yacc.c:1646  */
    break;

  case 42:
#line 538 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-1].byte_list); }
#line 2264 "parser.cc" /* yacc.c:1646  */
    break;

  case 43:
#line 542 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = new PacketDrillBytes((yyvsp[0].byte)); }
#line 2270 "parser.cc" /* yacc.c:1646  */
    break;

  case 44:
#line 543 "parser.y" /* yacc.c:1646  */
    { (yyval.byte_list) = (yyvsp[-2].byte_list);
                       (yyvsp[-2].byte_list)->appendByte((yyvsp[0].byte)); }
#line 2277 "parser.cc" /* yacc.c:1646  */
    break;

  case 45:
#line 548 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: byte value out of range");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 2288 "parser.cc" /* yacc.c:1646  */
    break;

  case 46:
#line 554 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: byte value out of range");
    }
    (yyval.byte) = (yyvsp[0].integer);
}
#line 2299 "parser.cc" /* yacc.c:1646  */
    break;

  case 47:
#line 563 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2305 "parser.cc" /* yacc.c:1646  */
    break;

  case 48:
#line 564 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2316 "parser.cc" /* yacc.c:1646  */
    break;

  case 49:
#line 570 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2327 "parser.cc" /* yacc.c:1646  */
    break;

  case 50:
#line 576 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'I':
            if (flags & SCTP_DATA_CHUNK_I_BIT) {
                printf("Semantic error: I-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_I_BIT;
            }
            break;
        case 'U':
            if (flags & SCTP_DATA_CHUNK_U_BIT) {
                printf("Semantic error: U-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_U_BIT;
            }
            break;
        case 'B':
            if (flags & SCTP_DATA_CHUNK_B_BIT) {
                printf("Semantic error: B-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_B_BIT;
            }
            break;
        case 'E':
            if (flags & SCTP_DATA_CHUNK_E_BIT) {
                printf("Semantic error: E-bit specified multiple times");
            } else {
                flags |= SCTP_DATA_CHUNK_E_BIT;
            }
            break;
        default:
            printf("Semantic error: Only expecting IUBE as flags");
            break;
        }
    }
    (yyval.integer) = flags;
}
#line 2374 "parser.cc" /* yacc.c:1646  */
    break;

  case 51:
#line 621 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2380 "parser.cc" /* yacc.c:1646  */
    break;

  case 52:
#line 622 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2391 "parser.cc" /* yacc.c:1646  */
    break;

  case 53:
#line 628 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2402 "parser.cc" /* yacc.c:1646  */
    break;

  case 54:
#line 634 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_ABORT_CHUNK_T_BIT) {
                printf("Semantic error: T-bit specified multiple times");
            } else {
                flags |= SCTP_ABORT_CHUNK_T_BIT;
            }
            break;
        default:
            printf("Semantic error: Only expecting T as flags");
            break;
        }
    }
    (yyval.integer) = flags;
}
#line 2428 "parser.cc" /* yacc.c:1646  */
    break;

  case 55:
#line 658 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2434 "parser.cc" /* yacc.c:1646  */
    break;

  case 56:
#line 659 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2445 "parser.cc" /* yacc.c:1646  */
    break;

  case 57:
#line 665 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("Semantic error: flags value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2456 "parser.cc" /* yacc.c:1646  */
    break;

  case 58:
#line 671 "parser.y" /* yacc.c:1646  */
    {
    uint64 flags;
    char *c;

    flags = 0;
    for (c = (yyvsp[0].string); *c != '\0'; c++) {
        switch (*c) {
        case 'T':
            if (flags & SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT) {
                printf("Semantic error: T-bit specified multiple times");
            } else {
                flags |= SCTP_SHUTDOWN_COMPLETE_CHUNK_T_BIT;
            }
            break;
        default:
            printf("Semantic error: Only expecting T as flags");
            break;
        }
    }
    (yyval.integer) = flags;
}
#line 2482 "parser.cc" /* yacc.c:1646  */
    break;

  case 59:
#line 696 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2488 "parser.cc" /* yacc.c:1646  */
    break;

  case 60:
#line 697 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: tag value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2499 "parser.cc" /* yacc.c:1646  */
    break;

  case 61:
#line 706 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2505 "parser.cc" /* yacc.c:1646  */
    break;

  case 62:
#line 707 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: a_rwnd value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2516 "parser.cc" /* yacc.c:1646  */
    break;

  case 63:
#line 716 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2522 "parser.cc" /* yacc.c:1646  */
    break;

  case 64:
#line 717 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: os value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2533 "parser.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 726 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2539 "parser.cc" /* yacc.c:1646  */
    break;

  case 66:
#line 727 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: is value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2550 "parser.cc" /* yacc.c:1646  */
    break;

  case 67:
#line 736 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2556 "parser.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 737 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: tsn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2567 "parser.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 746 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2573 "parser.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 747 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: sid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2584 "parser.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 756 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2590 "parser.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 757 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("Semantic error: ssn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2601 "parser.cc" /* yacc.c:1646  */
    break;

  case 73:
#line 767 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2607 "parser.cc" /* yacc.c:1646  */
    break;

  case 74:
#line 768 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: ppid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2618 "parser.cc" /* yacc.c:1646  */
    break;

  case 75:
#line 774 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: ppid value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2629 "parser.cc" /* yacc.c:1646  */
    break;

  case 76:
#line 783 "parser.y" /* yacc.c:1646  */
    { (yyval.integer) = -1; }
#line 2635 "parser.cc" /* yacc.c:1646  */
    break;

  case 77:
#line 784 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("Semantic error: cum_tsn value out of range");
    }
    (yyval.integer) = (yyvsp[0].integer);
}
#line 2646 "parser.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 793 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2652 "parser.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 794 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2658 "parser.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 795 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 2664 "parser.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 800 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2670 "parser.cc" /* yacc.c:1646  */
    break;

  case 82:
#line 801 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = NULL; }
#line 2676 "parser.cc" /* yacc.c:1646  */
    break;

  case 83:
#line 802 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); }
#line 2682 "parser.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 807 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-9].integer) != -1) &&
        (!is_valid_u16((yyvsp[-9].integer)) || ((yyvsp[-9].integer) < SCTP_DATA_CHUNK_LENGTH))) {
        printf("Semantic error: length value out of range");
    }
    (yyval.sctp_chunk) = PacketDrill::buildDataChunk((yyvsp[-11].integer), (yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 2694 "parser.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 816 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildInitChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 2702 "parser.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 821 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildInitAckChunk((yyvsp[-12].integer), (yyvsp[-10].integer), (yyvsp[-8].integer), (yyvsp[-6].integer), (yyvsp[-4].integer), (yyvsp[-2].integer), (yyvsp[-1].expression_list));
}
#line 2710 "parser.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 826 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildSackChunk((yyvsp[-9].integer), (yyvsp[-7].integer), (yyvsp[-5].integer), (yyvsp[-3].sack_block_list), (yyvsp[-1].sack_block_list));
}
#line 2718 "parser.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 831 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 2726 "parser.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 837 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildHeartbeatAckChunk((yyvsp[-3].integer), (yyvsp[-1].sctp_parameter));
}
#line 2734 "parser.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 843 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildAbortChunk((yyvsp[-1].integer));
}
#line 2742 "parser.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 848 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownChunk((yyvsp[-3].integer), (yyvsp[-1].integer));
}
#line 2750 "parser.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 853 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownAckChunk((yyvsp[-1].integer));
}
#line 2758 "parser.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 858 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < SCTP_COOKIE_ACK_LENGTH))) {
        printf("Semantic error: length value out of range");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != SCTP_COOKIE_ACK_LENGTH + (yyvsp[-1].byte_list)->getListLength())) {
        printf("Semantic error: length value incompatible with val");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        printf("Semantic error: length needs to be specified");
    }
    (yyval.sctp_chunk) = PacketDrill::buildCookieEchoChunk((yyvsp[-5].integer), (yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 2777 "parser.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 874 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildCookieAckChunk((yyvsp[-1].integer));
}
#line 2785 "parser.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 879 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_chunk) = PacketDrill::buildShutdownCompleteChunk((yyvsp[-1].integer));
}
#line 2793 "parser.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 884 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = NULL; }
#line 2799 "parser.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 885 "parser.y" /* yacc.c:1646  */
    { (yyval.expression_list) = (yyvsp[0].expression_list); }
#line 2805 "parser.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 889 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = new cQueue("sctp_parameter_list");
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 2814 "parser.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 893 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyval.expression_list)->insert((yyvsp[0].sctp_parameter));
}
#line 2823 "parser.cc" /* yacc.c:1646  */
    break;

  case 100:
#line 901 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 2829 "parser.cc" /* yacc.c:1646  */
    break;

  case 101:
#line 902 "parser.y" /* yacc.c:1646  */
    { (yyval.sctp_parameter) = (yyvsp[0].sctp_parameter); }
#line 2835 "parser.cc" /* yacc.c:1646  */
    break;

  case 102:
#line 907 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(-1, NULL);
}
#line 2843 "parser.cc" /* yacc.c:1646  */
    break;

  case 103:
#line 910 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-3].integer) != -1) &&
        (!is_valid_u16((yyvsp[-3].integer)) || ((yyvsp[-3].integer) < 4))) {
        printf("Semantic error: length value out of range");
    }
    if (((yyvsp[-3].integer) != -1) && ((yyvsp[-1].byte_list) != NULL) &&
        ((yyvsp[-3].integer) != 4 + (yyvsp[-1].byte_list)->getListLength())) {
        printf("Semantic error: length value incompatible with val");
    }
    if (((yyvsp[-3].integer) == -1) && ((yyvsp[-1].byte_list) != NULL)) {
        printf("Semantic error: length needs to be specified");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter((yyvsp[-3].integer), (yyvsp[-1].byte_list));
}
#line 2862 "parser.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 927 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(-1, NULL);
}
#line 2870 "parser.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 930 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sctp_parameter) = new PacketDrillSctpParameter(-1, NULL);
}
#line 2878 "parser.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 933 "parser.y" /* yacc.c:1646  */
    {
    if (((yyvsp[-5].integer) < 4) || !is_valid_u32((yyvsp[-5].integer))) {
        printf("Semantic error: len value out of range");
    }
    (yyval.sctp_parameter) = new PacketDrillSctpParameter((yyvsp[-5].integer), NULL);
}
#line 2889 "parser.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 943 "parser.y" /* yacc.c:1646  */
    {
    (yyval.packet) = new PacketDrillPacket();
    (yyval.packet)->setDirection((yyvsp[0].direction));
}
#line 2898 "parser.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 951 "parser.y" /* yacc.c:1646  */
    {
    (yyval.direction) = DIRECTION_INBOUND;
    current_script_line = yylineno;
}
#line 2907 "parser.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 955 "parser.y" /* yacc.c:1646  */
    {
    (yyval.direction) = DIRECTION_OUTBOUND;
    current_script_line = yylineno;
}
#line 2916 "parser.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 962 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 2924 "parser.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 965 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = strdup(".");
}
#line 2932 "parser.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 968 "parser.y" /* yacc.c:1646  */
    {
#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
    asprintf(&((yyval.string)), "%s.", (yyvsp[-1].string));
#else
    sprintf(&((yyval.string)), "%s.", (yyvsp[-1].string));
#endif
    free((yyvsp[-1].string));
}
#line 2945 "parser.cc" /* yacc.c:1646  */
    break;

  case 113:
#line 976 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = strdup("");
}
#line 2953 "parser.cc" /* yacc.c:1646  */
    break;

  case 114:
#line 982 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-5].integer))) {
        printf("TCP start sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[-3].integer))) {
        printf("TCP end sequence number out of range");
    }
    if (!is_valid_u16((yyvsp[-1].integer))) {
        printf("TCP payload size out of range");
    }
    if ((yyvsp[-3].integer) != ((yyvsp[-5].integer) +(yyvsp[-1].integer))) {
        printf("inconsistent TCP sequence numbers and payload size");
    }
    (yyval.tcp_sequence_info).start_sequence = (yyvsp[-5].integer);
    (yyval.tcp_sequence_info).payload_bytes = (yyvsp[-1].integer);
    (yyval.tcp_sequence_info).protocol = IPPROTO_TCP;
}
#line 2975 "parser.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 1002 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sequence_number) = 0;
}
#line 2983 "parser.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 1005 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[0].integer))) {
    printf("TCP ack sequence number out of range");
    }
    (yyval.sequence_number) = (yyvsp[0].integer);
}
#line 2994 "parser.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 1014 "parser.y" /* yacc.c:1646  */
    {
    (yyval.window) = -1;
}
#line 3002 "parser.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 1017 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("TCP window value out of range");
    }
    (yyval.window) = (yyvsp[0].integer);
}
#line 3013 "parser.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 1026 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = new cQueue("opt_tcp_options");
}
#line 3021 "parser.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 1029 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = (yyvsp[-1].tcp_options);
}
#line 3029 "parser.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 1032 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = NULL; /* FLAG_OPTIONS_NOCHECK */
}
#line 3037 "parser.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 1039 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = new cQueue("tcp_option");
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 3046 "parser.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 1043 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_options) = (yyvsp[-2].tcp_options);
    (yyval.tcp_options)->insert((yyvsp[0].tcp_option));
}
#line 3055 "parser.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 1051 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_NOP, 1);
}
#line 3063 "parser.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 1054 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_EOL, 1);
}
#line 3071 "parser.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 1057 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_MAXSEG, TCPOLEN_MAXSEG);
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("mss value out of range");
    }
    (yyval.tcp_option)->setMss((yyvsp[0].integer));
}
#line 3083 "parser.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 1064 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_WINDOW, TCPOLEN_WINDOW);
    if (!is_valid_u8((yyvsp[0].integer))) {
        printf("window scale shift count out of range");
    }
    (yyval.tcp_option)->setWindowScale((yyvsp[0].integer));
}
#line 3095 "parser.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 1071 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK_PERMITTED, TCPOLEN_SACK_PERMITTED);
}
#line 3103 "parser.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 1074 "parser.y" /* yacc.c:1646  */
    {
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_SACK, 2+8*(yyvsp[0].sack_block_list)->getLength());
    (yyval.tcp_option)->setBlockList((yyvsp[0].sack_block_list));
}
#line 3112 "parser.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 1078 "parser.y" /* yacc.c:1646  */
    {
    uint32 val, ecr;
    (yyval.tcp_option) = new PacketDrillTcpOption(TCPOPT_TIMESTAMP, TCPOLEN_TIMESTAMP);
    if (!is_valid_u32((yyvsp[-2].integer))) {
        printf("ts val out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("ecr val out of range");
    }
    val = (yyvsp[-2].integer);
    ecr = (yyvsp[0].integer);
    (yyval.tcp_option)->setVal(val);
    (yyval.tcp_option)->setEcr(ecr);
}
#line 3131 "parser.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 1095 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("sack_block_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3140 "parser.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 1099 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-1].sack_block_list); (yyvsp[-1].sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3148 "parser.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 1105 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = new cQueue("gap_list");}
#line 3154 "parser.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 1106 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("gap_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3163 "parser.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 1110 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyvsp[-2].sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3171 "parser.cc" /* yacc.c:1646  */
    break;

  case 136:
#line 1116 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        printf("semantic_error: start value out of range");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("semantic_error: end value out of range");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 3185 "parser.cc" /* yacc.c:1646  */
    break;

  case 137:
#line 1128 "parser.y" /* yacc.c:1646  */
    { (yyval.sack_block_list) = new cQueue("dup_list");}
#line 3191 "parser.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 1129 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = new cQueue("dup_list");
    (yyval.sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3200 "parser.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 1133 "parser.y" /* yacc.c:1646  */
    {
    (yyval.sack_block_list) = (yyvsp[-2].sack_block_list); (yyvsp[-2].sack_block_list)->insert((yyvsp[0].sack_block));
}
#line 3208 "parser.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 1139 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u16((yyvsp[-2].integer))) {
        printf("semantic_error: start value out of range");
    }
    if (!is_valid_u16((yyvsp[0].integer))) {
        printf("semantic_error: end value out of range");
    }
    (yyval.sack_block) = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
}
#line 3222 "parser.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 1151 "parser.y" /* yacc.c:1646  */
    {
    if (!is_valid_u32((yyvsp[-2].integer))) {
        printf("TCP SACK left sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("TCP SACK right sequence number out of range");
    }
    PacketDrillStruct *block = new PacketDrillStruct((yyvsp[-2].integer), (yyvsp[0].integer));
    if (!is_valid_u32((yyvsp[-2].integer))) {
        printf("TCP SACK left sequence number out of range");
    }
    if (!is_valid_u32((yyvsp[0].integer))) {
        printf("TCP SACK right sequence number out of range");
    }
    (yyval.sack_block) = block;
}
#line 3243 "parser.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 1170 "parser.y" /* yacc.c:1646  */
    {
    (yyval.syscall) = (struct syscall_spec *)calloc(1, sizeof(struct syscall_spec));
    (yyval.syscall)->end_usecs = (yyvsp[-6].time_usecs);
    (yyval.syscall)->name = (yyvsp[-5].string);
    (yyval.syscall)->arguments = (yyvsp[-4].expression_list);
    (yyval.syscall)->result = (yyvsp[-2].expression);
    (yyval.syscall)->error = (yyvsp[-1].errno_info);
    (yyval.syscall)->note = (yyvsp[0].string);
}
#line 3257 "parser.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 1182 "parser.y" /* yacc.c:1646  */
    {
    (yyval.time_usecs) = -1;
}
#line 3265 "parser.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 1185 "parser.y" /* yacc.c:1646  */
    {
    (yyval.time_usecs) = (yyvsp[0].time_usecs);
}
#line 3273 "parser.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 1191 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
    current_script_line = yylineno;
}
#line 3282 "parser.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 1198 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = NULL;
}
#line 3290 "parser.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 1201 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-1].expression_list);
}
#line 3298 "parser.cc" /* yacc.c:1646  */
    break;

  case 148:
#line 1207 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = new cQueue("expressionList");
    (yyval.expression_list)->insert((cObject*)(yyvsp[0].expression));
}
#line 3307 "parser.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 1211 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression_list) = (yyvsp[-2].expression_list);
    (yyvsp[-2].expression_list)->insert((yyvsp[0].expression));
}
#line 3316 "parser.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 1218 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_ELLIPSIS);
}
#line 3324 "parser.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 1221 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression); }
#line 3331 "parser.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 1223 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3339 "parser.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 1226 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_WORD);
    (yyval.expression)->setString((yyvsp[0].string));
}
#line 3348 "parser.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 1230 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[0].string));
    (yyval.expression)->setFormat("\"%s\"");
}
#line 3358 "parser.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 1235 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_STRING);
    (yyval.expression)->setString((yyvsp[-1].string));
    (yyval.expression)->setFormat("\"%s\"...");
}
#line 3368 "parser.cc" /* yacc.c:1646  */
    break;

  case 156:
#line 1240 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3376 "parser.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 1243 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = (yyvsp[0].expression);
}
#line 3384 "parser.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 1251 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%ld");
}
#line 3392 "parser.cc" /* yacc.c:1646  */
    break;

  case 159:
#line 1257 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new_integer_expression((yyvsp[0].integer), "%#lx");
}
#line 3400 "parser.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 1263 "parser.y" /* yacc.c:1646  */
    {    /* bitwise OR */
    (yyval.expression) = new PacketDrillExpression(EXPR_BINARY);
    struct binary_expression *binary = (struct binary_expression *) malloc(sizeof(struct binary_expression));
    binary->op = strdup("|");
    binary->lhs = (yyvsp[-2].expression);
    binary->rhs = (yyvsp[0].expression);
    (yyval.expression)->setBinary(binary);
}
#line 3413 "parser.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 1274 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList(NULL);
}
#line 3422 "parser.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 1278 "parser.y" /* yacc.c:1646  */
    {
    (yyval.expression) = new PacketDrillExpression(EXPR_LIST);
    (yyval.expression)->setList((yyvsp[-1].expression_list));
}
#line 3431 "parser.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 1287 "parser.y" /* yacc.c:1646  */
    {
    (yyval.errno_info) = NULL;
}
#line 3439 "parser.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 1290 "parser.y" /* yacc.c:1646  */
    {
    (yyval.errno_info) = (struct errno_spec*)malloc(sizeof(struct errno_spec));
    (yyval.errno_info)->errno_macro = (yyvsp[-1].string);
    (yyval.errno_info)->strerror = (yyvsp[0].string);
}
#line 3449 "parser.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 1298 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = NULL;
}
#line 3457 "parser.cc" /* yacc.c:1646  */
    break;

  case 166:
#line 1301 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 3465 "parser.cc" /* yacc.c:1646  */
    break;

  case 167:
#line 1307 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[-1].string);
}
#line 3473 "parser.cc" /* yacc.c:1646  */
    break;

  case 168:
#line 1313 "parser.y" /* yacc.c:1646  */
    {
    (yyval.string) = (yyvsp[0].string);
}
#line 3481 "parser.cc" /* yacc.c:1646  */
    break;

  case 169:
#line 1316 "parser.y" /* yacc.c:1646  */
    {
#if !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32) && !defined(__CYGWIN__) && !defined(_WIN64)
    asprintf(&((yyval.string)), "%s %s", (yyvsp[-1].string), (yyvsp[0].string));
#else
    sprintf((yyval.string),"%s %s", (yyvsp[-1].string), (yyvsp[0].string));
#endif
    free((yyvsp[-1].string));
    free((yyvsp[0].string));
}
#line 3495 "parser.cc" /* yacc.c:1646  */
    break;


#line 3499 "parser.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
