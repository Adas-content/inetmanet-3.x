#! /usr/bin/env python
#
# This script automatically updates ChangeLog files from the git history.
# The result may need some editing before committing back into the repo.
#
import re
import os
import subprocess

useMarker = True

def updateChangeLogIn(dir):
    # read existing ChangeLog file
    f = open(os.path.join(dir,'ChangeLog'), 'r')
    oldLog = f.read()
    f.close()

    # find most recent entry in it
    since = '2000-01-01'
    m = re.search('^\d\d\d\d-\d\d-\d\d', oldLog)
    if m:
        since = m.group(0)

    # get appropriately formatted git log since that date
    gitLogCommand = ['git', 'log', '--date=short', '--pretty=format:%ad  %an%n%n%w(81,8,8)%s%n%n%b', '--since='+since, dir]    
    newLog = subprocess.check_output(gitLogCommand, shell=False)

    print "   ", len(re.findall('(?m)^2', newLog)), "entries since", since

    # concatenate the two logs
    sep = "\n\n----------- lines above this marker have been added from git log -----------\n\n" if useMarker else "\n\n"
    updatedLog = newLog.strip() + sep + oldLog.strip()

    # some cleanup
    updatedLog = re.sub('(?m)^\s+X-Committed-on-Branch:.*$', '', updatedLog)  # remove X-Committed-on-Branch lines
    updatedLog = re.sub('(?m)^    (    )?', "\t", updatedLog) # spaces-to-tab
    updatedLog = re.sub('(?m)[ \t]+$', '', updatedLog)     # remove end-line spaces
    updatedLog = re.sub("(?s)\n\n+", "\n\n", updatedLog)   # remove multiple blank lines

    # write to disk
    f = open(os.path.join(dir,'ChangeLog'), 'w')
    f.write(updatedLog)
    f.close()

# find those directories that contain ChangeLogs, and update them    
for root, dirs, files in os.walk('.'):
    if 'ChangeLog' in files:
        print root, "contains ChangeLog, updating..."
        updateChangeLogIn(root)


